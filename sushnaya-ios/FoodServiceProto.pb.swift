// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: food_service.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GetSelectedMenuDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "GetSelectedMenuDto"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SelectMenuDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "SelectMenuDto"

  var menus: [MenuDto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.menus)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.menus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.menus, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidUpdateTermsOfServicesDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidUpdateTermsOfServicesDto"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct GetRecommendationsDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "GetRecommendationsDto"

  var userID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.userID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct GetCategoryProductsDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "GetCategoryProductsDto"

  var categoryID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.categoryID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.categoryID != 0 {
      try visitor.visitSingularInt32Field(value: self.categoryID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct CreateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "CreateAddressDto"

  var address: AddressDto {
    get {return _storage._address ?? AddressDto()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {_storage._address = nil}

  var trackID: Int32 {
    get {return _storage._trackID}
    set {_uniqueStorage()._trackID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._address)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._trackID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._trackID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._trackID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DidCreateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidCreateAddressDto"

  var trackID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidNotCreateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidNotCreateAddressDto"

  var trackID: Int32 = 0

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct GetUserAddressesDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "GetUserAddressesDto"

  var userID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.userID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct UserAddressesDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "UserAddressesDto"

  var addresses: [AddressDto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.addresses)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addresses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct UpdateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "UpdateAddressDto"

  var trackID: Int32 {
    get {return _storage._trackID}
    set {_uniqueStorage()._trackID = newValue}
  }

  var address: AddressDto {
    get {return _storage._address ?? AddressDto()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {_storage._address = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._trackID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._trackID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._trackID, fieldNumber: 1)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DidUpdateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidUpdateAddressDto"

  var trackID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidNotUpdateAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidNotUpdateAddressDto"

  var trackID: Int32 = 0

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DeleteAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DeleteAddressDto"

  var addressID: Int32 = 0

  var trackID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.addressID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.trackID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.addressID != 0 {
      try visitor.visitSingularInt32Field(value: self.addressID, fieldNumber: 1)
    }
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidDeleteAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidDeleteAddressDto"

  var trackID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidNotDeleteAddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidNotDeleteAddressDto"

  var trackID: Int32 = 0

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.trackID)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackID != 0 {
      try visitor.visitSingularInt32Field(value: self.trackID, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct MenuDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "MenuDto"

  var menuID: Int32 {
    get {return _storage._menuID}
    set {_uniqueStorage()._menuID = newValue}
  }

  var locality: LocalityDto {
    get {return _storage._locality ?? LocalityDto()}
    set {_uniqueStorage()._locality = newValue}
  }
  /// Returns true if `locality` has been explicitly set.
  var hasLocality: Bool {return _storage._locality != nil}
  /// Clears the value of `locality`. Subsequent reads from it will return its default value.
  mutating func clearLocality() {_storage._locality = nil}

  var categories: [CategoryDto] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._menuID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._locality)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._categories)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._menuID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._menuID, fieldNumber: 1)
      }
      if let v = _storage._locality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct LocalityDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "LocalityDto"

  var name: String = String()

  var descr: String = String()

  var latitude: Double = 0

  var longitude: Double = 0

  var lowerLatitude: Double = 0

  var lowerLongitude: Double = 0

  var upperLatitude: Double = 0

  var upperLongitude: Double = 0

  var fiasID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.descr)
      case 3: try decoder.decodeSingularDoubleField(value: &self.latitude)
      case 4: try decoder.decodeSingularDoubleField(value: &self.longitude)
      case 5: try decoder.decodeSingularDoubleField(value: &self.lowerLatitude)
      case 6: try decoder.decodeSingularDoubleField(value: &self.lowerLongitude)
      case 7: try decoder.decodeSingularDoubleField(value: &self.upperLatitude)
      case 8: try decoder.decodeSingularDoubleField(value: &self.upperLongitude)
      case 9: try decoder.decodeSingularStringField(value: &self.fiasID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.descr.isEmpty {
      try visitor.visitSingularStringField(value: self.descr, fieldNumber: 2)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 3)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 4)
    }
    if self.lowerLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.lowerLatitude, fieldNumber: 5)
    }
    if self.lowerLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.lowerLongitude, fieldNumber: 6)
    }
    if self.upperLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.upperLatitude, fieldNumber: 7)
    }
    if self.upperLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.upperLongitude, fieldNumber: 8)
    }
    if !self.fiasID.isEmpty {
      try visitor.visitSingularStringField(value: self.fiasID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct DidSelectMenuDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "DidSelectMenuDto"

  var menuID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.menuID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.menuID != 0 {
      try visitor.visitSingularInt32Field(value: self.menuID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct CategoriesDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "CategoriesDto"

  var categories: [CategoryDto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.categories)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categories, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct CategoryDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "CategoryDto"

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var photo: PhotoDto {
    get {return _storage._photo ?? PhotoDto()}
    set {_uniqueStorage()._photo = newValue}
  }
  /// Returns true if `photo` has been explicitly set.
  var hasPhoto: Bool {return _storage._photo != nil}
  /// Clears the value of `photo`. Subsequent reads from it will return its default value.
  mutating func clearPhoto() {_storage._photo = nil}

  var rank: Float {
    get {return _storage._rank}
    set {_uniqueStorage()._rank = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._photo)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._rank)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._photo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._rank != 0 {
        try visitor.visitSingularFloatField(value: _storage._rank, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct RecommendationsDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "RecommendationsDto"

  var products: [ProductDto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.products)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct ProductsDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "ProductsDto"

  var products: [ProductDto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.products)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct ProductDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "ProductDto"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var subheading: String {
    get {return _storage._subheading}
    set {_uniqueStorage()._subheading = newValue}
  }

  var pricing: [PriceDto] {
    get {return _storage._pricing}
    set {_uniqueStorage()._pricing = newValue}
  }

  var photo: PhotoDto {
    get {return _storage._photo ?? PhotoDto()}
    set {_uniqueStorage()._photo = newValue}
  }
  /// Returns true if `photo` has been explicitly set.
  var hasPhoto: Bool {return _storage._photo != nil}
  /// Clears the value of `photo`. Subsequent reads from it will return its default value.
  mutating func clearPhoto() {_storage._photo = nil}

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var categoryID: Int32 {
    get {return _storage._categoryID}
    set {_uniqueStorage()._categoryID = newValue}
  }

  var options: [ProductOptionDto] {
    get {return _storage._options}
    set {_uniqueStorage()._options = newValue}
  }

  var rank: Float {
    get {return _storage._rank}
    set {_uniqueStorage()._rank = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._subheading)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._pricing)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._photo)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._categoryID)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._options)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._rank)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._subheading.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subheading, fieldNumber: 2)
      }
      if !_storage._pricing.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pricing, fieldNumber: 3)
      }
      if let v = _storage._photo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 5)
      }
      if _storage._categoryID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._categoryID, fieldNumber: 6)
      }
      if !_storage._options.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._options, fieldNumber: 7)
      }
      if _storage._rank != 0 {
        try visitor.visitSingularFloatField(value: _storage._rank, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProductOptionDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "ProductOptionDto"

  var id: Int32 = 0

  var name: String = String()

  var price: Double = 0

  var rank: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularDoubleField(value: &self.price)
      case 4: try decoder.decodeSingularFloatField(value: &self.rank)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.price != 0 {
      try visitor.visitSingularDoubleField(value: self.price, fieldNumber: 3)
    }
    if self.rank != 0 {
      try visitor.visitSingularFloatField(value: self.rank, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PriceDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "PriceDto"

  var value: Double = 0

  var modifier: String = String()

  var id: Int32 = 0

  var currencyLocale: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.value)
      case 2: try decoder.decodeSingularStringField(value: &self.modifier)
      case 3: try decoder.decodeSingularInt32Field(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.currencyLocale)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 1)
    }
    if !self.modifier.isEmpty {
      try visitor.visitSingularStringField(value: self.modifier, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 3)
    }
    if !self.currencyLocale.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyLocale, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PhotoDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "PhotoDto"

  var height: Int32 = 0

  var width: Int32 = 0

  var url: String = String()

  var id: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.height)
      case 2: try decoder.decodeSingularInt32Field(value: &self.width)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeSingularInt32Field(value: &self.id)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct AddressDto: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddressDto"

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var locality: LocalityDto {
    get {return _storage._locality ?? LocalityDto()}
    set {_uniqueStorage()._locality = newValue}
  }
  /// Returns true if `locality` has been explicitly set.
  var hasLocality: Bool {return _storage._locality != nil}
  /// Clears the value of `locality`. Subsequent reads from it will return its default value.
  mutating func clearLocality() {_storage._locality = nil}

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var streetAndHouse: String {
    get {return _storage._streetAndHouse}
    set {_uniqueStorage()._streetAndHouse = newValue}
  }

  var apartment: String {
    get {return _storage._apartment}
    set {_uniqueStorage()._apartment = newValue}
  }

  var entrance: String {
    get {return _storage._entrance}
    set {_uniqueStorage()._entrance = newValue}
  }

  var floor: String {
    get {return _storage._floor}
    set {_uniqueStorage()._floor = newValue}
  }

  var comment: String {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  var orderCount: Int32 {
    get {return _storage._orderCount}
    set {_uniqueStorage()._orderCount = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._locality)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._latitude)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._longitude)
        case 5: try decoder.decodeSingularStringField(value: &_storage._streetAndHouse)
        case 6: try decoder.decodeSingularStringField(value: &_storage._apartment)
        case 7: try decoder.decodeSingularStringField(value: &_storage._entrance)
        case 8: try decoder.decodeSingularStringField(value: &_storage._floor)
        case 9: try decoder.decodeSingularStringField(value: &_storage._comment)
        case 10: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._orderCount)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._locality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 3)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 4)
      }
      if !_storage._streetAndHouse.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streetAndHouse, fieldNumber: 5)
      }
      if !_storage._apartment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apartment, fieldNumber: 6)
      }
      if !_storage._entrance.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entrance, fieldNumber: 7)
      }
      if !_storage._floor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._floor, fieldNumber: 8)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comment, fieldNumber: 9)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 10)
      }
      if _storage._orderCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._orderCount, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct UserMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = "UserMessage"

  var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var didSelectMenu: DidSelectMenuDto {
    get {
      if case .didSelectMenu(let v)? = _storage._type {return v}
      return DidSelectMenuDto()
    }
    set {_uniqueStorage()._type = .didSelectMenu(newValue)}
  }

  var getSelectedMenu: GetSelectedMenuDto {
    get {
      if case .getSelectedMenu(let v)? = _storage._type {return v}
      return GetSelectedMenuDto()
    }
    set {_uniqueStorage()._type = .getSelectedMenu(newValue)}
  }

  var getRecommendations: GetRecommendationsDto {
    get {
      if case .getRecommendations(let v)? = _storage._type {return v}
      return GetRecommendationsDto()
    }
    set {_uniqueStorage()._type = .getRecommendations(newValue)}
  }

  var getCategoryProducts: GetCategoryProductsDto {
    get {
      if case .getCategoryProducts(let v)? = _storage._type {return v}
      return GetCategoryProductsDto()
    }
    set {_uniqueStorage()._type = .getCategoryProducts(newValue)}
  }

  var createAddress: CreateAddressDto {
    get {
      if case .createAddress(let v)? = _storage._type {return v}
      return CreateAddressDto()
    }
    set {_uniqueStorage()._type = .createAddress(newValue)}
  }

  var getUserAddresses: GetUserAddressesDto {
    get {
      if case .getUserAddresses(let v)? = _storage._type {return v}
      return GetUserAddressesDto()
    }
    set {_uniqueStorage()._type = .getUserAddresses(newValue)}
  }

  var updateAddress: UpdateAddressDto {
    get {
      if case .updateAddress(let v)? = _storage._type {return v}
      return UpdateAddressDto()
    }
    set {_uniqueStorage()._type = .updateAddress(newValue)}
  }

  var deleteAddress: DeleteAddressDto {
    get {
      if case .deleteAddress(let v)? = _storage._type {return v}
      return DeleteAddressDto()
    }
    set {_uniqueStorage()._type = .deleteAddress(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case didSelectMenu(DidSelectMenuDto)
    case getSelectedMenu(GetSelectedMenuDto)
    case getRecommendations(GetRecommendationsDto)
    case getCategoryProducts(GetCategoryProductsDto)
    case createAddress(CreateAddressDto)
    case getUserAddresses(GetUserAddressesDto)
    case updateAddress(UpdateAddressDto)
    case deleteAddress(DeleteAddressDto)

    static func ==(lhs: UserMessage.OneOf_Type, rhs: UserMessage.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.didSelectMenu(let l), .didSelectMenu(let r)): return l == r
      case (.getSelectedMenu(let l), .getSelectedMenu(let r)): return l == r
      case (.getRecommendations(let l), .getRecommendations(let r)): return l == r
      case (.getCategoryProducts(let l), .getCategoryProducts(let r)): return l == r
      case (.createAddress(let l), .createAddress(let r)): return l == r
      case (.getUserAddresses(let l), .getUserAddresses(let r)): return l == r
      case (.updateAddress(let l), .updateAddress(let r)): return l == r
      case (.deleteAddress(let l), .deleteAddress(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: DidSelectMenuDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didSelectMenu(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didSelectMenu(v)}
        case 2:
          var v: GetSelectedMenuDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .getSelectedMenu(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .getSelectedMenu(v)}
        case 3:
          var v: GetRecommendationsDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .getRecommendations(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .getRecommendations(v)}
        case 4:
          var v: GetCategoryProductsDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .getCategoryProducts(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .getCategoryProducts(v)}
        case 5:
          var v: CreateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .createAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .createAddress(v)}
        case 6:
          var v: GetUserAddressesDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .getUserAddresses(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .getUserAddresses(v)}
        case 7:
          var v: UpdateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .updateAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .updateAddress(v)}
        case 8:
          var v: DeleteAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .deleteAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .deleteAddress(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .didSelectMenu(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .getSelectedMenu(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .getRecommendations(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .getCategoryProducts(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .createAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .getUserAddresses(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .updateAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .deleteAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FoodServiceMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = "FoodServiceMessage"

  var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var selectMenu: SelectMenuDto {
    get {
      if case .selectMenu(let v)? = _storage._type {return v}
      return SelectMenuDto()
    }
    set {_uniqueStorage()._type = .selectMenu(newValue)}
  }

  var didUpdateTermsOfServices: DidUpdateTermsOfServicesDto {
    get {
      if case .didUpdateTermsOfServices(let v)? = _storage._type {return v}
      return DidUpdateTermsOfServicesDto()
    }
    set {_uniqueStorage()._type = .didUpdateTermsOfServices(newValue)}
  }

  var menu: MenuDto {
    get {
      if case .menu(let v)? = _storage._type {return v}
      return MenuDto()
    }
    set {_uniqueStorage()._type = .menu(newValue)}
  }

  var categories: CategoriesDto {
    get {
      if case .categories(let v)? = _storage._type {return v}
      return CategoriesDto()
    }
    set {_uniqueStorage()._type = .categories(newValue)}
  }

  var recommendations: RecommendationsDto {
    get {
      if case .recommendations(let v)? = _storage._type {return v}
      return RecommendationsDto()
    }
    set {_uniqueStorage()._type = .recommendations(newValue)}
  }

  var products: ProductsDto {
    get {
      if case .products(let v)? = _storage._type {return v}
      return ProductsDto()
    }
    set {_uniqueStorage()._type = .products(newValue)}
  }

  var didCreateAddress: DidCreateAddressDto {
    get {
      if case .didCreateAddress(let v)? = _storage._type {return v}
      return DidCreateAddressDto()
    }
    set {_uniqueStorage()._type = .didCreateAddress(newValue)}
  }

  var didNotCreateAddress: DidNotCreateAddressDto {
    get {
      if case .didNotCreateAddress(let v)? = _storage._type {return v}
      return DidNotCreateAddressDto()
    }
    set {_uniqueStorage()._type = .didNotCreateAddress(newValue)}
  }

  var userAddresses: UserAddressesDto {
    get {
      if case .userAddresses(let v)? = _storage._type {return v}
      return UserAddressesDto()
    }
    set {_uniqueStorage()._type = .userAddresses(newValue)}
  }

  var didUpdateAddress: DidUpdateAddressDto {
    get {
      if case .didUpdateAddress(let v)? = _storage._type {return v}
      return DidUpdateAddressDto()
    }
    set {_uniqueStorage()._type = .didUpdateAddress(newValue)}
  }

  var didNotUpdateAddress: DidNotUpdateAddressDto {
    get {
      if case .didNotUpdateAddress(let v)? = _storage._type {return v}
      return DidNotUpdateAddressDto()
    }
    set {_uniqueStorage()._type = .didNotUpdateAddress(newValue)}
  }

  var didDeleteAddress: DidDeleteAddressDto {
    get {
      if case .didDeleteAddress(let v)? = _storage._type {return v}
      return DidDeleteAddressDto()
    }
    set {_uniqueStorage()._type = .didDeleteAddress(newValue)}
  }

  var didNotDeleteAddress: DidNotDeleteAddressDto {
    get {
      if case .didNotDeleteAddress(let v)? = _storage._type {return v}
      return DidNotDeleteAddressDto()
    }
    set {_uniqueStorage()._type = .didNotDeleteAddress(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case selectMenu(SelectMenuDto)
    case didUpdateTermsOfServices(DidUpdateTermsOfServicesDto)
    case menu(MenuDto)
    case categories(CategoriesDto)
    case recommendations(RecommendationsDto)
    case products(ProductsDto)
    case didCreateAddress(DidCreateAddressDto)
    case didNotCreateAddress(DidNotCreateAddressDto)
    case userAddresses(UserAddressesDto)
    case didUpdateAddress(DidUpdateAddressDto)
    case didNotUpdateAddress(DidNotUpdateAddressDto)
    case didDeleteAddress(DidDeleteAddressDto)
    case didNotDeleteAddress(DidNotDeleteAddressDto)

    static func ==(lhs: FoodServiceMessage.OneOf_Type, rhs: FoodServiceMessage.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.selectMenu(let l), .selectMenu(let r)): return l == r
      case (.didUpdateTermsOfServices(let l), .didUpdateTermsOfServices(let r)): return l == r
      case (.menu(let l), .menu(let r)): return l == r
      case (.categories(let l), .categories(let r)): return l == r
      case (.recommendations(let l), .recommendations(let r)): return l == r
      case (.products(let l), .products(let r)): return l == r
      case (.didCreateAddress(let l), .didCreateAddress(let r)): return l == r
      case (.didNotCreateAddress(let l), .didNotCreateAddress(let r)): return l == r
      case (.userAddresses(let l), .userAddresses(let r)): return l == r
      case (.didUpdateAddress(let l), .didUpdateAddress(let r)): return l == r
      case (.didNotUpdateAddress(let l), .didNotUpdateAddress(let r)): return l == r
      case (.didDeleteAddress(let l), .didDeleteAddress(let r)): return l == r
      case (.didNotDeleteAddress(let l), .didNotDeleteAddress(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: SelectMenuDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .selectMenu(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .selectMenu(v)}
        case 2:
          var v: DidUpdateTermsOfServicesDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didUpdateTermsOfServices(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didUpdateTermsOfServices(v)}
        case 3:
          var v: MenuDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .menu(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .menu(v)}
        case 4:
          var v: CategoriesDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .categories(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .categories(v)}
        case 5:
          var v: RecommendationsDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .recommendations(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .recommendations(v)}
        case 6:
          var v: ProductsDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .products(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .products(v)}
        case 7:
          var v: DidCreateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didCreateAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didCreateAddress(v)}
        case 8:
          var v: DidNotCreateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didNotCreateAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didNotCreateAddress(v)}
        case 9:
          var v: UserAddressesDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .userAddresses(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .userAddresses(v)}
        case 10:
          var v: DidUpdateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didUpdateAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didUpdateAddress(v)}
        case 11:
          var v: DidNotUpdateAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didNotUpdateAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didNotUpdateAddress(v)}
        case 12:
          var v: DidDeleteAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didDeleteAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didDeleteAddress(v)}
        case 13:
          var v: DidNotDeleteAddressDto?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .didNotDeleteAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .didNotDeleteAddress(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .selectMenu(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .didUpdateTermsOfServices(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .menu(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .categories(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .recommendations(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .products(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .didCreateAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .didNotCreateAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .userAddresses(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .didUpdateAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .didNotUpdateAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .didDeleteAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .didNotDeleteAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GetSelectedMenuDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: GetSelectedMenuDto) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SelectMenuDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menus"),
  ]

  func _protobuf_generated_isEqualTo(other: SelectMenuDto) -> Bool {
    if self.menus != other.menus {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidUpdateTermsOfServicesDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: DidUpdateTermsOfServicesDto) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GetRecommendationsDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  func _protobuf_generated_isEqualTo(other: GetRecommendationsDto) -> Bool {
    if self.userID != other.userID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GetCategoryProductsDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categoryId"),
  ]

  func _protobuf_generated_isEqualTo(other: GetCategoryProductsDto) -> Bool {
    if self.categoryID != other.categoryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CreateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "trackId"),
  ]

  fileprivate class _StorageClass {
    var _address: AddressDto? = nil
    var _trackID: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _address = source._address
      _trackID = source._trackID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: CreateAddressDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._address != other_storage._address {return false}
        if _storage._trackID != other_storage._trackID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidCreateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
  ]

  func _protobuf_generated_isEqualTo(other: DidCreateAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidNotCreateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
    2: .same(proto: "error"),
  ]

  func _protobuf_generated_isEqualTo(other: DidNotCreateAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if self.error != other.error {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GetUserAddressesDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  func _protobuf_generated_isEqualTo(other: GetUserAddressesDto) -> Bool {
    if self.userID != other.userID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension UserAddressesDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addresses"),
  ]

  func _protobuf_generated_isEqualTo(other: UserAddressesDto) -> Bool {
    if self.addresses != other.addresses {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension UpdateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
    2: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _trackID: Int32 = 0
    var _address: AddressDto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trackID = source._trackID
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: UpdateAddressDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._trackID != other_storage._trackID {return false}
        if _storage._address != other_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidUpdateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
  ]

  func _protobuf_generated_isEqualTo(other: DidUpdateAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidNotUpdateAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
    2: .same(proto: "error"),
  ]

  func _protobuf_generated_isEqualTo(other: DidNotUpdateAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if self.error != other.error {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DeleteAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addressId"),
    2: .same(proto: "trackId"),
  ]

  func _protobuf_generated_isEqualTo(other: DeleteAddressDto) -> Bool {
    if self.addressID != other.addressID {return false}
    if self.trackID != other.trackID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidDeleteAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
  ]

  func _protobuf_generated_isEqualTo(other: DidDeleteAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidNotDeleteAddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackId"),
    2: .same(proto: "error"),
  ]

  func _protobuf_generated_isEqualTo(other: DidNotDeleteAddressDto) -> Bool {
    if self.trackID != other.trackID {return false}
    if self.error != other.error {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MenuDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menuId"),
    2: .same(proto: "locality"),
    3: .same(proto: "categories"),
  ]

  fileprivate class _StorageClass {
    var _menuID: Int32 = 0
    var _locality: LocalityDto? = nil
    var _categories: [CategoryDto] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _menuID = source._menuID
      _locality = source._locality
      _categories = source._categories
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: MenuDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._menuID != other_storage._menuID {return false}
        if _storage._locality != other_storage._locality {return false}
        if _storage._categories != other_storage._categories {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension LocalityDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "descr"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .same(proto: "lowerLatitude"),
    6: .same(proto: "lowerLongitude"),
    7: .same(proto: "upperLatitude"),
    8: .same(proto: "upperLongitude"),
    9: .same(proto: "fiasId"),
  ]

  func _protobuf_generated_isEqualTo(other: LocalityDto) -> Bool {
    if self.name != other.name {return false}
    if self.descr != other.descr {return false}
    if self.latitude != other.latitude {return false}
    if self.longitude != other.longitude {return false}
    if self.lowerLatitude != other.lowerLatitude {return false}
    if self.lowerLongitude != other.lowerLongitude {return false}
    if self.upperLatitude != other.upperLatitude {return false}
    if self.upperLongitude != other.upperLongitude {return false}
    if self.fiasID != other.fiasID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DidSelectMenuDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menuId"),
  ]

  func _protobuf_generated_isEqualTo(other: DidSelectMenuDto) -> Bool {
    if self.menuID != other.menuID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CategoriesDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categories"),
  ]

  func _protobuf_generated_isEqualTo(other: CategoriesDto) -> Bool {
    if self.categories != other.categories {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CategoryDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "photo"),
    4: .same(proto: "rank"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _name: String = String()
    var _photo: PhotoDto? = nil
    var _rank: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _photo = source._photo
      _rank = source._rank
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: CategoryDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._photo != other_storage._photo {return false}
        if _storage._rank != other_storage._rank {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension RecommendationsDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
  ]

  func _protobuf_generated_isEqualTo(other: RecommendationsDto) -> Bool {
    if self.products != other.products {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProductsDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
  ]

  func _protobuf_generated_isEqualTo(other: ProductsDto) -> Bool {
    if self.products != other.products {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProductDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "subheading"),
    3: .same(proto: "pricing"),
    4: .same(proto: "photo"),
    5: .same(proto: "id"),
    6: .same(proto: "categoryId"),
    7: .same(proto: "options"),
    8: .same(proto: "rank"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _subheading: String = String()
    var _pricing: [PriceDto] = []
    var _photo: PhotoDto? = nil
    var _id: Int32 = 0
    var _categoryID: Int32 = 0
    var _options: [ProductOptionDto] = []
    var _rank: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _subheading = source._subheading
      _pricing = source._pricing
      _photo = source._photo
      _id = source._id
      _categoryID = source._categoryID
      _options = source._options
      _rank = source._rank
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ProductDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._subheading != other_storage._subheading {return false}
        if _storage._pricing != other_storage._pricing {return false}
        if _storage._photo != other_storage._photo {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._categoryID != other_storage._categoryID {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._rank != other_storage._rank {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProductOptionDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "price"),
    4: .same(proto: "rank"),
  ]

  func _protobuf_generated_isEqualTo(other: ProductOptionDto) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.price != other.price {return false}
    if self.rank != other.rank {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PriceDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "modifier"),
    3: .same(proto: "id"),
    4: .same(proto: "currencyLocale"),
  ]

  func _protobuf_generated_isEqualTo(other: PriceDto) -> Bool {
    if self.value != other.value {return false}
    if self.modifier != other.modifier {return false}
    if self.id != other.id {return false}
    if self.currencyLocale != other.currencyLocale {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PhotoDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    3: .same(proto: "url"),
    4: .same(proto: "id"),
  ]

  func _protobuf_generated_isEqualTo(other: PhotoDto) -> Bool {
    if self.height != other.height {return false}
    if self.width != other.width {return false}
    if self.url != other.url {return false}
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddressDto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "locality"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .same(proto: "streetAndHouse"),
    6: .same(proto: "apartment"),
    7: .same(proto: "entrance"),
    8: .same(proto: "floor"),
    9: .same(proto: "comment"),
    10: .same(proto: "displayName"),
    11: .same(proto: "orderCount"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _locality: LocalityDto? = nil
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _streetAndHouse: String = String()
    var _apartment: String = String()
    var _entrance: String = String()
    var _floor: String = String()
    var _comment: String = String()
    var _displayName: String = String()
    var _orderCount: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _locality = source._locality
      _latitude = source._latitude
      _longitude = source._longitude
      _streetAndHouse = source._streetAndHouse
      _apartment = source._apartment
      _entrance = source._entrance
      _floor = source._floor
      _comment = source._comment
      _displayName = source._displayName
      _orderCount = source._orderCount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddressDto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._locality != other_storage._locality {return false}
        if _storage._latitude != other_storage._latitude {return false}
        if _storage._longitude != other_storage._longitude {return false}
        if _storage._streetAndHouse != other_storage._streetAndHouse {return false}
        if _storage._apartment != other_storage._apartment {return false}
        if _storage._entrance != other_storage._entrance {return false}
        if _storage._floor != other_storage._floor {return false}
        if _storage._comment != other_storage._comment {return false}
        if _storage._displayName != other_storage._displayName {return false}
        if _storage._orderCount != other_storage._orderCount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension UserMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "didSelectMenu"),
    2: .same(proto: "getSelectedMenu"),
    3: .same(proto: "getRecommendations"),
    4: .same(proto: "getCategoryProducts"),
    5: .same(proto: "createAddress"),
    6: .same(proto: "getUserAddresses"),
    7: .same(proto: "updateAddress"),
    8: .same(proto: "deleteAddress"),
  ]

  fileprivate class _StorageClass {
    var _type: UserMessage.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: UserMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension FoodServiceMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selectMenu"),
    2: .same(proto: "didUpdateTermsOfServices"),
    3: .same(proto: "menu"),
    4: .same(proto: "categories"),
    5: .same(proto: "recommendations"),
    6: .same(proto: "products"),
    7: .same(proto: "didCreateAddress"),
    8: .same(proto: "didNotCreateAddress"),
    9: .same(proto: "userAddresses"),
    10: .same(proto: "didUpdateAddress"),
    11: .same(proto: "didNotUpdateAddress"),
    12: .same(proto: "didDeleteAddress"),
    13: .same(proto: "didNotDeleteAddress"),
  ]

  fileprivate class _StorageClass {
    var _type: FoodServiceMessage.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: FoodServiceMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
